/**
 * EAS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DrawTossPayload from '../model/DrawTossPayload';
import Raffle from '../model/Raffle';
import RaffleResult from '../model/RaffleResult';

/**
 * Raffle service.
 * @module api/RaffleApi
 * @version v1
 */
export default class RaffleApi {
  /**
   * Constructs a new RaffleApi.
   * @alias module:api/RaffleApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * @param {module:model/Raffle} data
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Raffle} and HTTP response
   */
  raffleCreateWithHttpInfo(data) {
    const postBody = data;

    // verify the required parameter 'data' is set
    if (data === undefined || data === null) {
      throw new Error("Missing the required parameter 'data' when calling raffleCreate");
    }

    const pathParams = {};
    const queryParams = {};
    const headerParams = {};
    const formParams = {};

    const authNames = [];
    const contentTypes = ['application/json'];
    const accepts = ['application/json'];
    const returnType = Raffle;

    return this.apiClient.callApi(
      '/raffle/',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
    );
  }

  /**
   * @param {module:model/Raffle} data
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Raffle}
   */
  raffleCreate(data) {
    return this.raffleCreateWithHttpInfo(data).then(response_and_data => response_and_data.data);
  }

  /**
   * @param {String} id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Raffle} and HTTP response
   */
  raffleReadWithHttpInfo(id) {
    const postBody = null;

    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling raffleRead");
    }

    const pathParams = {
      id,
    };
    const queryParams = {};
    const headerParams = {};
    const formParams = {};

    const authNames = [];
    const contentTypes = ['application/json'];
    const accepts = ['application/json'];
    const returnType = Raffle;

    return this.apiClient.callApi(
      '/raffle/{id}/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
    );
  }

  /**
   * @param {String} id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Raffle}
   */
  raffleRead(id) {
    return this.raffleReadWithHttpInfo(id).then(response_and_data => response_and_data.data);
  }

  /**
   * @param {String} id
   * @param {module:model/DrawTossPayload} data
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RaffleResult} and HTTP response
   */
  raffleTossWithHttpInfo(id, data) {
    const postBody = data;

    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling raffleToss");
    }

    // verify the required parameter 'data' is set
    if (data === undefined || data === null) {
      throw new Error("Missing the required parameter 'data' when calling raffleToss");
    }

    const pathParams = {
      id,
    };
    const queryParams = {};
    const headerParams = {};
    const formParams = {};

    const authNames = [];
    const contentTypes = ['application/json'];
    const accepts = ['application/json'];
    const returnType = RaffleResult;

    return this.apiClient.callApi(
      '/raffle/{id}/toss/',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
    );
  }

  /**
   * @param {String} id
   * @param {module:model/DrawTossPayload} data
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RaffleResult}
   */
  raffleToss(id, data) {
    return this.raffleTossWithHttpInfo(id, data).then(response_and_data => response_and_data.data);
  }
}
